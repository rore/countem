countem {

countersUpdateIntervalSeconds = 30

akka {
    # event-handlers = ["AkkaLogging"]
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    # Log level used by the configured loggers (see "event-handlers") as soon
    # as they have been started; before that, see "stdout-loglevel"
    # Options: ERROR, WARNING, INFO, DEBUG
    loglevel = "DEBUG"
     
    # Log level for the very basic logger activated during AkkaApplication startup
    # Options: ERROR, WARNING, INFO, DEBUG
    stdout-loglevel = "DEBUG"
     
    # Log the complete configuration at INFO level when the actor system is started.
    # This is useful when you are uncertain of what configuration is used.
    log-config-on-start = off
     
  }
	
pool-dispatcher {
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher
    # What kind of ExecutionService to use
    executor = "fork-join-executor"
    # Configuration for the fork join pool
    fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 10
 }

router-dispatcher {
    # Dispatcher is the name of the event-based dispatcher
    type = Dispatcher
    # What kind of ExecutionService to use
    executor = "fork-join-executor"
    # Configuration for the fork join pool
    fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = 2
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = 2.0
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = 10
    }
    # Throughput defines the maximum number of messages to be
    # processed per actor before the thread jumps to the next actor.
    # Set to 1 for as fair as possible.
    throughput = 10
 }
   
 akka.actor.deployment {
    "/collectActor" {
    dispatcher = router-dispatcher
    router = round-robin-pool
    nr-of-instances = 2
    resizer {
    	lower-bound = 2
    	upper-bound = 10
    	messages-per-resize = 1
    }
   }   
   "/collectActor/*" {
    dispatcher = pool-dispatcher 
   }   
   "/storageActor" {
    dispatcher = router-dispatcher
    router = round-robin-pool
   }   
   "/storageActor/*" {
    dispatcher = pool-dispatcher 
   }   
}
 


}